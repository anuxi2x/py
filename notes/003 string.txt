strings - everything in ' ' single or double " " quotes
we can assign multiline string to a variable by using three single or double quotes

get a character at position 1
a = 'sometext'
print(a[1])

loop through a string
for x in 'sometext':
    print(x)

string length
print(len(a))

check string
To check if a certain phrase or character is present in a string, we can use the keyword in.
txt = "The best things in life are free!"
print("free" in txt)

txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")

chech if NOT
txt = "The best things in life are free!"
print("expensive" not in txt)

check with 'if' statement
txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.")

string slice
Get the characters from the start to position 5 (not included):
b = "Hello, World!"
print(b[:5])

Get the characters from position 2, and all the way to the end:
b = "Hello, World!"
print(b[2:])

negative indexing:
get characters from 'o' (World) to 'd' in (World)
b = "Hello, World!"
print(b[-5:-2])

uppercase - a.upper()
lowercase - a.lower()
remove whitespaces - a.strip()
replace string - a.replace('H', 'J'): replaces all H (_old) to J (_new)
split string - a.split('seperator'): turns into list with seperator

string concatination with + sign

string format
age = 36
txt = "My name is John, I am " + age
print(txt)

Use the format() method to insert numbers into strings:
example 1:
age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))

example 2:
quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))

You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:
quantity = 3
itemno = 567
price = 49.95
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))

Escape character
An escape character is a backslash \ followed by the character you want to insert.
txt = "We are the so-called \"Vikings\" from the north."

all escape characters:
\'	Single Quote	
\\	Backslash	
\n	New Line	
\r	Carriage Return	
\t	Tab	
\b	Backspace	
\f	Form Feed	
\ooo	Octal value	
\xhh	Hex value

all string methods:
All string methods return new values. They do not change the original string.
capitalize() - Converts the first character to upper case
casefold() - Converts string into lower case
center() - Returns a centered string
count() - Returns the number of times a specified value occurs in a string
encode() - Returns an encoded version of the string
endswith() - Returns true if the string ends with the specified value
expandtabs() - Sets the tab size of the string
find() - Searches the string for a specified value and returns the position of where it was found
format() - Formats specified values in a string
format_map() - Formats specified values in a string
index() - Searches the string for a specified value and returns the position of where it was found
isalnum() - Returns True if all characters in the string are alphanumeric
isalpha() - Returns True if all characters in the string are in the alphabet
isascii() - Returns True if all characters in the string are ascii characters
isdecimal() - Returns True if all characters in the string are decimals
isdigit() - Returns True if all characters in the string are digits
isidentifier() - Returns True if the string is an identifier
islower() -	Returns True if all characters in the string are lower case
isnumeric() - Returns True if all characters in the string are numeric
isprintable() -	Returns True if all characters in the string are printable
isspace() -	Returns True if all characters in the string are whitespaces
istitle() -	Returns True if the string follows the rules of a title
isupper() -	Returns True if all characters in the string are upper case
join() - Joins the elements of an iterable to the end of the string
ljust() - Returns a left justified version of the string
lower() - Converts a string into lower case
lstrip() - Returns a left trim version of the string
maketrans() - Returns a translation table to be used in translations
partition() - Returns a tuple where the string is parted into three parts
replace() - Returns a string where a specified value is replaced with a specified value
rfind() - Searches the string for a specified value and returns the last position of where it was found
rindex() - Searches the string for a specified value and returns the last position of where it was found
rjust() - Returns a right justified version of the string
rpartition() - Returns a tuple where the string is parted into three parts
rsplit() - Splits the string at the specified separator, and returns a list
rstrip() - Returns a right trim version of the string
split() - Splits the string at the specified separator, and returns a list
splitlines() - Splits the string at line breaks and returns a list
startswith() - Returns true if the string starts with the specified value
strip() - Returns a trimmed version of the string
swapcase() - Swaps cases, lower case becomes upper case and vice versa
title() - Converts the first character of each word to upper case
translate() - Returns a translated string
upper() - Converts a string into upper case
zfill() - Fills the string with a specified number of 0 values at the beginning

matrix is an array with another array inside of it
matrix = [
  [1,0,1],
  [0,1,0],
  [1,0,1]  
]